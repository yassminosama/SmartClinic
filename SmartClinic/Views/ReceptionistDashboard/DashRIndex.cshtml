@model SmartClinic.ViewModels.ReceptionistDashboardVM

@{
    ViewData["Title"] = "Receptionist Dashboard";
}

<style>
    :root {
        --petrolic: #006d77;
        --petrolic-dark: #004f54;
        --light-bg: #f1f1f1;
        --accent: #83c5be;
        --text-color: #333;
        --white: #ffffff;
    }

    body {
        background-color: var(--light-bg);
        color: var(--text-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    h1, h2, h3 {
        color: var(--petrolic-dark);
    }

    .table {
        background-color: var(--white);
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    th {
        background-color: var(--petrolic);
        color: var(--white);
    }

    .table td,
    .table th {
        vertical-align: middle;
    }

    .appointment-order {
        font-weight: bold;
        color: var(--accent);
    }

    .guest-row {
        background-color: #e0f7fa;
    }

    .time-left-cell {
        font-family: monospace;
        font-weight: bold;
    }

    .time-expired {
        color: #dc3545;
    }

    .time-remaining {
        color: #28a745;
    }

    .btn-primary, .btn-info, .btn-warning {
        border-radius: 20px;
        font-weight: 500;
        padding: 5px 15px;
    }

    .btn-primary {
        background-color: var(--petrolic);
        border-color: var(--petrolic-dark);
    }

    .btn-warning {
        background-color: #ffc107;
        border-color: #e0a800;
        color: #000;
    }

    .btn-info {
        background-color: #17a2b8;
        border-color: #138496;
        color: #fff;
    }

    form {
        background-color: var(--white);
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
        margin-top: 30px;
    }

    label {
        font-weight: 600;
        color: var(--petrolic-dark);
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #ccc;
    }

    button[type="submit"] {
        margin-top: 10px;
    }
</style>

<h1>Welcome, <span style="color: var(--petrolic);">@Model.User.FullName</span></h1>
<p><strong>Role:</strong> Receptionist</p>

<h2>Today's Appointments (Ordered by Registration Time)</h2>
<table class="table table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>Patient Name</th>
            <th>Doctor Name</th>
            <th>Time Left</th>
            <th>Status</th>
            <th>Bill Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            int counter = 1;
        }
        @foreach (var appointment in Model.Appointments)
        {
            <tr class="@(appointment.GuestName != null ? "guest-row" : "")">
                <td class="appointment-order">@(counter++)</td>
                <td>@(appointment.PatientName ?? appointment.GuestName)</td>
                <td>@appointment.DoctorName</td>
                <td class="time-left-cell
                            @(appointment.Status == "Entered" || appointment.AppointmentDate <= DateTime.Now ? "time-expired" : "time-remaining")"
                    data-appointment-date="@appointment.AppointmentDate.ToString("o")"
                    data-appointment-status="@appointment.Status">
                    @if (appointment.Status == "Entered")
                    {
                        @:Entered
                    }
                    else
                    {
                        @appointment.TimeLeft
                    }
                </td>
                <td>@appointment.Status</td>
                <td>@appointment.BillStatus</td>
                <td>
                    @if (appointment.Status == "Scheduled")
                    {
                        <form asp-action="MarkAsEntered" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="appointmentId" value="@appointment.AppointmentId" />
                            <button type="submit" class="btn @(appointment.GuestName != null ? "btn-info" : "btn-warning") btn-sm">
                                @(appointment.GuestName != null ? "Guest Check-In" : "Mark as Entered")
                            </button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>Create Guest Appointment</h3>
<form asp-action="CreateGuestAppointment" method="post">
    @Html.AntiForgeryToken()
    <div class="form-group">
        <label for="guestName">Guest Name</label>
        <input type="text" id="guestName" name="guestName" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="guestPhone">Guest Phone</label>
        <input type="text" id="guestPhone" name="guestPhone" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="doctorId">Doctor</label>
        <select id="doctorId" name="doctorId" class="form-control" required>
            @foreach (var doctor in Model.Doctors)
            {
                <option value="@doctor.Id">@doctor.FullName</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="appointmentDate">Appointment Date</label>
        <input type="datetime-local" id="appointmentDate" name="appointmentDate"
               class="form-control" required
               value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
    </div>
    <button type="submit" class="btn btn-primary">Create Guest Appointment</button>
</form>

@section Scripts {
    <script>
        function updateTimeLeft() {
            const now = new Date();
            document.querySelectorAll('[data-appointment-date]').forEach(cell => {
                const appointmentDate = new Date(cell.getAttribute('data-appointment-date'));
                const status = cell.getAttribute('data-appointment-status');

                if (status === "Entered") {
                    cell.textContent = "Entered";
                    cell.classList.remove('time-remaining');
                    cell.classList.add('time-expired');
                    return;
                }

                const diffMs = appointmentDate - now;

                if (diffMs > 0) {
                    const diffSec = Math.floor(diffMs / 1000);
                    const hours = Math.floor(diffSec / 3600);
                    const minutes = Math.floor((diffSec % 3600) / 60);
                    const seconds = diffSec % 60;

                    cell.textContent =
                        `${hours.toString().padStart(2, '0')}:` +
                        `${minutes.toString().padStart(2, '0')}:` +
                        `${seconds.toString().padStart(2, '0')}`;

                    cell.classList.remove('time-expired');
                    cell.classList.add('time-remaining');
                } else {
                    cell.textContent = "Entered";
                    cell.classList.remove('time-remaining');
                    cell.classList.add('time-expired');
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            updateTimeLeft();
            setInterval(updateTimeLeft, 1000);
        });
    </script>
}
